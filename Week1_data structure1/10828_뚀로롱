import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.Buffer;
import java.util.*;

//ver1.배열
//221228(수) 채원
public class Main {
    public static void main(String[] args) throws IOException {
        // write your code here
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
       
        Stack stack = new Stack();
        stack.createStack(N);
        while (N > 0) {
            StringTokenizer st = new StringTokenizer(br.readLine(), " ");
            switch (st.nextToken()) {
                case "push":
                    int x = Integer.parseInt(st.nextToken());
                    stack.push(x);
                    break;
                case "pop":
                    stack.pop();
                    break;
                case "size":
                    System.out.println(stack.size());
                    break;
                case "empty":
                    stack.isEmpty();
                    break;
                case "top":
                    stack.printTop();
                    break;
            }
            N--;
        }

    }
//스택 클래스
    public static class Stack {
        int top;
        int[] stack;
        int size;

        public void createStack(int N) {
            this.size = N;
            stack = new int[size];
            top = -1;
        }

        public void push(int x) {
            stack[++top] = x;
        }

        public void pop() {
            if (top == -1) {
                System.out.println(-1);
            } else {
                System.out.println(stack[top]);
                stack[top--] = 0;
            }
        }

        public int size() {
            return top + 1;
        }

        public void isEmpty() {
            if (top == -1) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }

        public void printTop() {
            if (top == -1) {
                System.out.println(-1);
            } else {
                System.out.println(stack[top]);
            }
        }
    }
}
